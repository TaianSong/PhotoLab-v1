/*** header files ***/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/*** global definitions ***/

#define WIDTH  600		/* image width */
#define HEIGHT 400		/* image height */
#define SLEN    64		/* maximum length of file names */

#define PI 3.14159265

/*** function declarations ***/

/* print a menu */
void PrintMenu(void);

/* read image from a file */
/* written for you; should not been modified */
int LoadImage(const char fname[SLEN], unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

/* save a processed image */
/* written for you; should not been modified */
int SaveImage(const char fname[SLEN], unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

/* aging the photo */
/* sample function to get you started */
void Aging(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

/* change a color image to black & white */
void BlackNWhite(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

/* sharpen the image */
void Sharpen(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

/* change the image hue */
void Hue(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT], int degree);

/* test all functions */
void AutoTest(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT]);

int main(void)
{
    /* Two dimensional arrays to hold the current image data, */
    /* one array for each color component.                    */
    unsigned char   R[WIDTH][HEIGHT];
    unsigned char   G[WIDTH][HEIGHT];
    unsigned char   B[WIDTH][HEIGHT];
    int selection, degree;
    char fname[255];


    while(1)
    {
        PrintMenu();
        scanf("%d", &selection);
        switch (selection)
        {
            case 1:
                printf("Please input a file name to load: \n");
                scanf("%s", fname);
                LoadImage(fname, R, G, B);
                break;
            case 2:
                printf("Please input the file name to save: \n");
                scanf("%79s", &fname[0]);
                SaveImage(fname, R, G, B);
                break;
            case 3:
                BlackNWhite(R, G, B);
                printf("\"Black & White\" Operation Done!\n");
                break;
            case 4:
                Sharpen(R,G,B);
                printf("\"Sharpen\" Operation Done!\n");
                break;
            case 5:
                printf("Please input a degree you want to load: \n");
                scanf("%d", &degree);
                Hue(R,G,B,degree);
                printf("\"Hue\" Operation Done!\n");
                break;
            case 6:
                AutoTest(R,G,B);
                break;
            case 7 : return 0;
            default: break;

        }
    }
    return 0;
}


void PrintMenu(void)
{
    printf("\n----------------------------------------------\n");
    printf("1: Load a PPM image\n");
    printf("2: Save the image in PPM and JPEG format\n");
    printf("3: Change the color image to black and white\n");
    printf("4: Sharpen the image\n");
    printf("5: Change the hue of image\n");
    printf("6: Test all functions\n");
    printf("7: Exit\n");
    printf("\n----------------------------------------------\n");
    printf("\nPlease make your choice:\n");
    printf("\n");
}


/* takes in a file name without extension */
/* writes file into R, G, B arrays */
int LoadImage(const char fname[SLEN], unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    FILE *File;
    char Type[SLEN];
    int  Width, Height, MaxValue;
    int  x, y;
    char ftype[] = ".ppm";
    char fname_ext[SLEN + sizeof(ftype)];

    strcpy(fname_ext, fname);
    strcat(fname_ext, ftype);

    File = fopen(fname_ext, "r");
    if (!File) {
        printf("\nCannot open file \"%s\" for reading!\n", fname);
        return 1;
    }
    fscanf(File, "%79s", Type);
    if (Type[0] != 'P' || Type[1] != '6' || Type[2] != 0) {
        printf("\nUnsupported file format!\n");
        return 2;
    }
    fscanf(File, "%d", &Width);
    if (Width != WIDTH) {
        printf("\nUnsupported image width %d!\n", Width);
        return 3;
    }
    fscanf(File, "%d", &Height);
    if (Height != HEIGHT) {
        printf("\nUnsupported image height %d!\n", Height);
        return 4;
    }
    fscanf(File, "%d", &MaxValue);
    if (MaxValue != 255) {
        printf("\nUnsupported image maximum value %d!\n", MaxValue);
        return 5;
    }
    if ('\n' != fgetc(File)) {
        printf("\nCarriage return expected!\n");
        return 6;
    }
    for (y = 0; y < HEIGHT; y++) {
        for (x = 0; x < WIDTH; x++) {
            R[x][y] = fgetc(File);
            G[x][y] = fgetc(File);
            B[x][y] = fgetc(File);
        }
    }
    if (ferror(File)) {
        printf("\nFile error while reading from file!\n");
        return 7;
    }
    printf("%s was read successfully!\n", fname_ext);
    fclose(File);
    return 0;
}

/* takes R, G, B arrays and writes it in a file */
/* filename (fname) has no extension */
int SaveImage(const char fname[SLEN], unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    FILE *File;
    char ftype[] = ".ppm";
    char fname_ext[SLEN + sizeof(ftype)];
    char SysCmd[SLEN * 5];
    int  x, y;

    strcpy(fname_ext, fname);
    strcat(fname_ext, ftype);

    File = fopen(fname_ext, "w");
    if (!File) {
        printf("\nCannot open file \"%s\" for writing!\n", fname);
        return 1;
    }
    fprintf(File, "P6\n");
    fprintf(File, "%d %d\n", WIDTH, HEIGHT);
    fprintf(File, "255\n");

    for (y = 0; y < HEIGHT; y++) {
        for (x = 0; x < WIDTH; x++) {
            fputc(R[x][y], File);
            fputc(G[x][y], File);
            fputc(B[x][y], File);
        }
    }

    if (ferror(File)) {
        printf("\nFile error while writing to file!\n");
        return 2;
    }
    fclose(File);
    printf("%s was saved successfully. \n", fname_ext);

    /*
     * rename file to image.ppm, convert it to ~/public_html/<fname>.jpg
     * and make it world readable
     */
    sprintf(SysCmd, "~eecs22/bin/pnmtojpeg_hw2.tcsh %s", fname_ext);
    if (system(SysCmd) != 0) {
        printf("\nError while converting to JPG:\nCommand \"%s\" failed!\n", SysCmd);
        return 3;
    }
    printf("%s.jpg was stored for viewing. \n", fname);

    return 0;
}

/* age the image to make it look like old picture */
void Aging(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    int x, y;

    for( y = 0; y < HEIGHT; y++ ) {
        for( x = 0; x < WIDTH; x++ ) {
            B[x][y] = ( R[x][y]+G[x][y]+B[x][y] )/5;
            R[x][y] = (unsigned char) (B[x][y]*1.6);
            G[x][y] = (unsigned char) (B[x][y]*1.6);
        }
    }
}

void BlackNWhite(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    int x, y, z;

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            B[x][y] = (R[x][y] + G[x][y] + B[x][y]) / 3;
            z = B[x][y];
            R[x][y] = z;
            G[x][y] = z;
        }
    }
    printf("\"Black & White\" operation is done!");
}

void Sharpen(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    int x, y;
    int new_R[WIDTH][HEIGHT];
    int new_G[WIDTH][HEIGHT];
    int new_B[WIDTH][HEIGHT];

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            new_R[x][y] = R[x][y];
            new_G[x][y] = G[x][y];
            new_B[x][y] = B[x][y];
        }
    }

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            if (x !=0 && y != 0 && x != WIDTH && y != HEIGHT)
            {
                new_R[x][y] = 9 * R[x][y] - R[x - 1][y] - R[x + 1][y] - R[x][y - 1] - R[x][y + 1] - R[x - 1][y - 1] -
                              R[x + 1][y - 1] - R[x - 1][y + 1] - R[x + 1][y + 1];
                new_G[x][y] = 9 * G[x][y] - G[x - 1][y] - G[x + 1][y] - G[x][y - 1] - G[x][y + 1] - G[x - 1][y - 1] -
                              G[x + 1][y - 1] - G[x - 1][y + 1] - G[x + 1][y + 1];
                new_B[x][y] = 9 * B[x][y] - B[x - 1][y] - B[x + 1][y] - B[x][y - 1] - B[x][y + 1] - B[x - 1][y - 1] -
                              B[x + 1][y - 1] - B[x - 1][y + 1] - B[x + 1][y + 1];
            }
        }
    }

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            if (new_R[x][y] < 0) {
                new_R[x][y] = 0;
            }
            else if (new_R[x][y] > 255) {
                new_R[x][y] = 255;
            }
            if (new_B[x][y] < 0) {
                new_B[x][y] = 0;
            }
            else if (new_B[x][y] > 255) {
                new_B[x][y] = 255;
            }
            if (new_G[x][y] < 0) {
                new_G[x][y] = 0;
            }
            else if (new_G[x][y] > 255) {
                new_G[x][y] = 255;
            }
        }
    }

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            R[x][y] = new_R[x][y];
            G[x][y] = new_G[x][y];
            B[x][y] = new_B[x][y];
        }
    }
}


void Hue(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT], int degree)
{
    int x, y;
    double a, b, c;
    unsigned char   new_R[WIDTH][HEIGHT];
    unsigned char   new_G[WIDTH][HEIGHT];
    unsigned char   new_B[WIDTH][HEIGHT];

    a = (2*cos(degree*PI/180)+1)/3;
    b = (1-cos(degree*PI/180))/3 - sin(degree*PI/180)/sqrt(3);
    c = (1-cos(degree*PI/180))/3 + sin(degree*PI/180)/sqrt(3);

    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            new_R[x][y] = R[x][y]*a + G[x][y]*b + B[x][y]*c;
            new_G[x][y] = R[x][y]*c + G[x][y]*a + B[x][y]*b;
            new_B[x][y] = R[x][y]*b + G[x][y]*c + B[x][y]*a;
        }
    }
    for( y = 0; y < HEIGHT; y++ ) {
        for (x = 0; x < WIDTH; x++) {
            R[x][y] = new_R[x][y];
            G[x][y] = new_G[x][y];
            B[x][y] = new_B[x][y];
        }
    }


}
/* Test all functions */
void AutoTest(unsigned char R[WIDTH][HEIGHT], unsigned char G[WIDTH][HEIGHT], unsigned char B[WIDTH][HEIGHT])
{
    int degree = 120;

    LoadImage("applestore", R, G, B);
    Aging(R, G, B);
    SaveImage("aging", R, G, B);
    printf("Aging tested!\n\n");

    /* add more tests here */
    LoadImage("applestore", R, G, B);
    BlackNWhite(R, G, B);
    SaveImage("bw", R, G, B);
    printf("BlackNWhite tested!\n\n");

    LoadImage("applestore", R, G, B);
    Sharpen(R, G, B);
    SaveImage("sharpen", R, G, B);
    printf("Sharpen tested!\n\n");

    LoadImage("applestore", R, G, B);
    Hue(R, G, B, degree);
    SaveImage("hue", R, G, B);
    printf("Hue tested!\n\n");

}

/**************************************************************/
